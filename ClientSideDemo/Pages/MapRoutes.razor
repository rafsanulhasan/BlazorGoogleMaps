@page "/mapRoutes"
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps

<h1>Google Map</h1>

<GoogleMap @ref="@_map1" Id="map1" Options="@_mapOptions" Height="350px" OnAfterInit="@(async () => await OnAfterInitAsync())"></GoogleMap>
<button @onclick="@(_ => AddDirections())">Add Direction</button>
<button @onclick="@( distanceTotalString => RemoveRoute())">Remove route</button>

<p>
    Duration: @_durationTotalString <br />
    Distance: @_distanceTotalString <br />
</p>

@code {
    private GoogleMap? _map1;
    private MapOptions _mapOptions = default!;
    private DirectionsRenderer _dirRend = default!;
    private string? _durationTotalString;
    private string? _distanceTotalString;

    protected override void OnInitialized()
    {
        _mapOptions = new MapOptions()
        {
            Zoom = 13,
            Center = new LatLngLiteral()
            {
                Lat = 40.603629,
                Lng = -75.472518
            },
            MapTypeId = MapTypeId.Roadmap
        };
    }

    private async Task RemoveRoute()
    {
        await _dirRend.SetMap(null);

        _durationTotalString = null;
        _distanceTotalString = null;
    }

    private async Task OnAfterInitAsync()
    {
        //Create instance of DirectionRenderer
        _dirRend = await DirectionsRenderer.CreateAsync(_map1!.JsRuntime, new DirectionsRendererOptions()
        {
            Map = _map1.InteropObject
        });
    }

    private async Task AddDirections()
    {
        _durationTotalString = null;
        _distanceTotalString = null;
        if (await _dirRend.GetMap() is null) await _dirRend.SetMap(_map1!.InteropObject);

        //Adding a waypoint
        var waypoints = new List<DirectionsWaypoint>();
        waypoints.Add(new DirectionsWaypoint() { Location = "Bethlehem, PA", Stopover = true });

        //Direction Request
        DirectionsRequest dr = new DirectionsRequest();
        dr.Origin = "Allentown, PA";
        dr.Destination = "Bronx, NY";
        dr.Waypoints = waypoints;
        dr.TravelMode = TravelMode.Driving;

        //Calculate Route
        var directionsResult = await _dirRend.Route(dr);
        if (directionsResult != null)
        {
            foreach (var route in directionsResult.Routes.SelectMany(x => x.Legs))
            {
                _durationTotalString += route.Duration.Text;
                _distanceTotalString += route.Distance.Text;
            }
        }
    }
}
