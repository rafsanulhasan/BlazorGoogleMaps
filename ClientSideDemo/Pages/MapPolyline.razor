@page "/mapPolyline"
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps

<h1>Polylines</h1>

<GoogleMap  @ref="@_map1" Id="map1" Options="@_mapOptions" OnAfterInit="async () => await OnAfterMapInit()"></GoogleMap>
<button @onclick="StartDrawingPolyline">Start drawing polyline</button>
<button @onclick="EndDrawingPolyline">End drawing polyline</button>
<br />
<button @onclick="StartDrawingPolygon">Start drawing polygon</button>
<button @onclick="EndDrawingPolygon">End drawing polygon</button>
<br />
<button @onclick="DrawingRectangle">Drawing rectangle</button>
<br />
<button @onclick="DrawingCircle">Drawing circle</button>

@functions {
    private GoogleMap _map1 = default!;

    private MapOptions _mapOptions = default!;

    private List<LatLngLiteral> _path = new List<LatLngLiteral>();

    private List<Polyline> _polylines = new List<Polyline>();
    private Polyline? _polyline;

    private List<Polygon> _polygons = new List<Polygon>();
    private Polygon? _polygon;

    private Rectangle? _rectangle;
    private Circle? _circle;

    protected override void OnInitialized()
    {
        _mapOptions = new MapOptions()
        {
            Zoom = 13,
            Center = new LatLngLiteral()
            {
                Lat = 13.505892,
                Lng = 100.8162
            },
            MapTypeId = MapTypeId.Roadmap
        };
    }

    private async Task OnAfterMapInit()
    {
        await _map1.InteropObject.AddListener<MouseEvent>("click", async (e) => await OnClick(e));
    }

    private async Task StartDrawingPolyline()
    {
        _polyline = await Polyline.CreateAsync(_map1.JsRuntime, new PolylineOptions()
        {
            Draggable = true,
            Editable = true,
            Map = _map1.InteropObject
        });

        _path.Clear();
    }

    private void EndDrawingPolyline()
    {

        if (_polyline is { }) {
            _polylines.Add(_polyline);
        }

        _polyline = null;
        _path.Clear();
    }

    private async Task StartDrawingPolygon()
    {
        _polygon = await Polygon.CreateAsync(_map1.JsRuntime, new PolygonOptions()
        {
            Draggable = true,
            Editable = true,
            Map = _map1.InteropObject
        });

        _path.Clear();
    }

    private void EndDrawingPolygon()
    {
        if (_polygon is { }) {
            _polygons.Add(_polygon);
        }

        _polygon = null;
        _path.Clear();
    }

    private async Task DrawingRectangle()
    {
        _rectangle = await Rectangle.CreateAsync(_map1.JsRuntime, new RectangleOptions()
        {
            Draggable = true,
            Editable = true,
            Map = _map1.InteropObject
        });

        _path.Clear();
    }

    private async Task DrawingCircle()
    {
        _circle = await Circle.CreateAsync(_map1.JsRuntime, new CircleOptions()
        {
            Draggable = true,
            Editable = true,
            Map = _map1.InteropObject,
            Radius = 1000
        });

        _path.Clear();
    }

    private async Task OnClick(MouseEvent e)
    {
        //Debug.WriteLine($"Onclick : {mouseEvent.LatLng}");

        _path.Add(e.LatLng);

        if (_polyline != null)
        {
            //Debug.WriteLine($"Path length : {path.Count()}");

            await _polyline.SetPath(_path);
        }
        else if (_polygon != null)
        {
            await _polygon.SetPath(_path);
        }
        else if (_rectangle != null)
        {
            if (_path.Count < 2)
            {
                return;
            }

            var bounds = new LatLngBoundsLiteral()
            {
                East = _path[1].Lng,
                North = _path[0].Lat,
                South = _path[1].Lat,
                West = _path[0].Lng
            };

            await _rectangle.SetBounds(bounds);

            //path.Clear();
            _rectangle = null;
        }
        else if (_circle != null)
        {
            await _circle.SetCenter(_path.First());
            _circle = null;
        }
    }

}