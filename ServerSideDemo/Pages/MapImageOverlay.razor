@page "/map-image-overlay"
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps

<h1>Map Events</h1>

<GoogleMap @ref="@map1" Id="map1" Options="@mapOptions" OnAfterInit="@OnAfterInitAsync">
</GoogleMap>

Overlay Opacity:
<input type="range" min="0" max="1" step="0.02" @bind-value="@LayerOpacity" @bind-value:event="oninput" />
<br />
<button @onclick="AddMarker">Add marker</button>&nbsp;
<button @onclick="RemoveMarker">Remove marker</button>
<br>
<input type="checkbox" bind="@DisablePoiInfoWindow" />Disable POI's popup info window
<br>

<MapEventList @ref="@eventList" Events="@_events"></MapEventList>

@code {
    private GoogleMap map1;
    private MapEventList eventList;

    private MapOptions mapOptions;
    ImageMapType overlayImage;
    float layerOpacity = 0.5f;
    private float LayerOpacity
    {
        get => layerOpacity;
        set
        {
            _ = overlayImage.SetOpacity(value); // don't await
            layerOpacity = value;
        }
    }

    private List<String> _events = new List<String>();

    private bool DisablePoiInfoWindow { get; set; } = false;

    private Stack<Marker> markers = new Stack<Marker>();
    private string labelText = "";

    protected override void OnInitialized()
    {
        mapOptions = new MapOptions()
            {
                Zoom = 13,
                Center = new LatLngLiteral()
                {
                    Lat = 13.505892,
                    Lng = 100.8162
                },
                MapTypeId = MapTypeId.Roadmap
            };
    }

    private async Task OnAfterInitAsync()
    {
        //Debug.WriteLine("Start OnAfterRenderAsync");

        await map1.InteropObject.AddListener("bounds_changed", OnBoundsChanged);

        await map1.InteropObject.AddListener("center_changed", OnCenterChanged);

        await map1.InteropObject.AddListener<MouseEvent>("click", async (e) => await OnClick(e));

        await map1.InteropObject.AddListener("dblclick", OnDoubleClick);

        await map1.InteropObject.AddListener("drag", OnDrag);

        await map1.InteropObject.AddListener("dragend", OnDragEnd);

        await map1.InteropObject.AddListener("dragstart", OnDragStart);

        await map1.InteropObject.AddListener("heading_changed", OnHeadingChanged);

        await map1.InteropObject.AddListener("idle", OnIdle);

        await map1.InteropObject.AddListener("maptypeid_changed", OnMapTypeIdChanged);

        await map1.InteropObject.AddListener<MouseEvent>("mousemove", OnMouseMove);
        await map1.InteropObject.AddListener<MouseEvent>("mousedown", OnMouseMove);

        await map1.InteropObject.AddListener("mouseout", OnMouseOut);

        await map1.InteropObject.AddListener("mouseover", OnMouseOver);

        await map1.InteropObject.AddListener("projection_changed", OnProjectionChanged);

        await map1.InteropObject.AddListener("rightclick", OnRightClick);

        await map1.InteropObject.AddListener("tilesloaded", OnTilesLoaded);

        await map1.InteropObject.AddListener("tilt_changed", OnTiltChanged);

        await map1.InteropObject.AddListener("zoom_changed", OnZoomChanged);

        ////////////////////////////////////////////
        // To use a single url/subdomain, you can use this call
        overlayImage = await ImageMapType.CreateAsync(map1.JsRuntime, "https://a.tile.openstreetmap.org/{z}/{x}/{y}.png", 0, 20, "OSM", 0.75f);

        ////////////////////////////////////////////
        // to provide multiple subdomains (which use y mod subDomains.Length as the index into the array of domains), us this call
        //overlayImage = await ImageMapType.CreateAsync(map1.JsRuntime, "https://{domain}.tile.openstreetmap.org/{z}/{x}/{y}.png", new string[] { "a", "b", "c" }, 0, 20, "OSM", 0.75f);

        await map1.InteropObject?.AddImageLayer(overlayImage);
    }

    private void OnBoundsChanged()
    {
        //Console.WriteLine("Bounds changed.");

        _events.Insert(0, "Bounds changed.");
        _events = _events.Take(100).ToList();

        StateHasChanged();
    }

    private void OnCenterChanged()
    {
        //Console.WriteLine("Center changed.");

        _events.Insert(0, "Center changed.");
        _events = _events.Take(100).ToList();

        StateHasChanged();
    }

    private async Task OnClick(MouseEvent e)
    {
        //Console.WriteLine("Click.");

        _events.Insert(0, $"Click {e.LatLng}.");
        _events = _events.Take(100).ToList();

        StateHasChanged();

        if (DisablePoiInfoWindow)
        {
            await e.Stop();
        }
    }

    private void OnDoubleClick()
    {
        //Console.WriteLine("Double click.");

        _events.Insert(0, "Double click.");
        _events = _events.Take(100).ToList();

        StateHasChanged();
    }

    private void OnDrag()
    {
        //Console.WriteLine("Drag.");

        _events.Insert(0, "Drag.");
        _events = _events.Take(100).ToList();

        StateHasChanged();
    }

    private void OnDragEnd()
    {
        //Console.WriteLine("Drag end.");

        _events.Insert(0, "Drag end.");

        StateHasChanged();
    }

    private void OnDragStart()
    {
        //Console.WriteLine("Drag start.");

        _events.Insert(0, "Drag start.");
        _events = _events.Take(100).ToList();

        StateHasChanged();
    }

    private void OnHeadingChanged()
    {
        //Console.WriteLine("Heading changed.");

        _events.Insert(0, "Heading changed.");
        _events = _events.Take(100).ToList();

        StateHasChanged();
    }

    private void OnIdle()
    {
        //Console.WriteLine("Idle.");

        _events.Insert(0, "Idle.");
        _events = _events.Take(100).ToList();

        StateHasChanged();
    }

    private void OnMapTypeIdChanged()
    {
        //Console.WriteLine("OnMapTypeIdChanged.");

        _events.Insert(0, "OnMapTypeIdChanged.");
        _events = _events.Take(100).ToList();

        StateHasChanged();
    }

    private void OnMouseMove(MouseEvent e)
    {
        //Console.WriteLine("OnMouseMove.");

        _events.Insert(0, $"OnMouseMove {e.LatLng}.");
        _events = _events.Take(100).ToList();

        StateHasChanged();
    }

    private void OnMouseOut()
    {
        //Console.WriteLine("OnMouseOut.");

        _events.Insert(0, "OnMouseOut.");
        _events = _events.Take(100).ToList();

        StateHasChanged();
    }

    private void OnMouseOver()
    {
        //Console.WriteLine("OnMouseOver.");

        _events.Insert(0, "OnMouseOver.");

        StateHasChanged();
    }

    private void OnProjectionChanged()
    {
        //Console.WriteLine("OnProjectionChanged.");

        _events.Insert(0, "OnProjectionChanged.");

        StateHasChanged();
    }

    private void OnRightClick()
    {
        //Console.WriteLine("OnRightClick.");

        _events.Insert(0, "OnRightClick.");

        StateHasChanged();
    }

    private void OnTilesLoaded()
    {
        //Console.WriteLine("OnTilesLoaded.");

        _events.Insert(0, "OnTilesLoaded.");

        StateHasChanged();
    }

    private void OnTiltChanged()
    {
        //Console.WriteLine("OnTiltChanged.");

        _events.Insert(0, "OnTiltChanged.");

        StateHasChanged();
    }

    private async void OnZoomChanged()
    {
        //Console.WriteLine("OnZoomChanged.");
        var currentzoom = await map1.InteropObject.GetZoom();
        //Logger.LogInformation("Zoom result: {_currentzoom}");
        _events.Insert(0, $"OnZoomChanged {currentzoom} ");

        StateHasChanged();
    }
    private async Task AddMarker()
    {
        var marker = await Marker.CreateAsync(map1.JsRuntime,
            new MarkerOptions()
                {
                    Position = await map1.InteropObject.GetCenter(),
                    Map = map1.InteropObject,
                    Label = new MarkerLabel { Text = $"Test {markers.Count()}", FontWeight = "bold" },
                    Draggable = true,
                    Icon = new Icon()
                    {
                        Url = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png"
                    }
                //Icon = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png"
            });

        //await marker.SetMap(map1);

        //var map = await marker.GetMap();

        var icon = await marker.GetIcon();

        Console.WriteLine($"Get icon result type is : {icon.Value.GetType()}");

        icon.Switch(
            s => Console.WriteLine(s),
            i => Console.WriteLine(i.Url),
            _ => { });

        //if (map == map1.InteropObject)
        //{
        //    Console.WriteLine("Yess");
        //}
        //else
        //{
        //    Console.WriteLine("Nooo");
        //}

        markers.Push(marker);
        labelText = await marker.GetLabelText();

        await marker.AddListener<MouseEvent>("click", async e =>
        {
            string markerLabelText = await marker.GetLabelText();
            _events.Add("click on " + markerLabelText);
            StateHasChanged();
            await e.Stop();
        });
        await marker.AddListener<MouseEvent>("dragend", async e => await OnMakerDragEnd(marker, e));
    }

    private async Task OnMakerDragEnd(Marker M, MouseEvent e)
    {
        string markerLabelText = await M.GetLabelText();
        _events.Insert(0, $"OnMakerDragEnd ({markerLabelText}): ({e.LatLng}).");
        StateHasChanged();
        await e.Stop();
    }

    private async Task RemoveMarker()
    {
        if (!markers.Any())
        {
            return;
        }

        var lastMarker = markers.Pop();
        await lastMarker.SetMap(null);
        labelText = markers.Any() ? await markers.Peek().GetLabelText() : "";
    }


}
