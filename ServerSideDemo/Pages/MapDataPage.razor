@page "/map-data"
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps
@using GoogleMapsComponents.Maps.Data
@*
    The code for this sample was taken from below on 09/02/2020:
    https://developers.google.com/maps/documentation/javascript/earthquakes#maps_earthquake_circles-typescript
*@

<h1>Map Data</h1>

<GoogleMap @ref="@(this._map1)" Id="map1" Options="@(this._mapOptions)" OnAfterInit="async () => await OnAfterMapInit()"></GoogleMap>
<button @onclick="@GetMapDataFeature">Get MapData (Feature)</button>
<button @onclick="@GetMapDataGeoJsonLine">Get MapData (GeoJson Line)</button>
<button @onclick="@GetMapDataGeoJsonPolygon">Get MapData (GeoJson Polygon)</button>
<button @onclick="@RemoveFeatures">Remove All Features</button>

<div>
    <p style="font-weight: bold; font-size: 1.2em">@this._message</p>
</div>

@functions {
    private GoogleMap _map1;
    private MapOptions _mapOptions;
    private string _message = "";

    protected override void OnInitialized()
    {
        _mapOptions = new MapOptions
            {
                Zoom = 13,
                Center = new LatLngLiteral
                {
                    Lat = -33.8688,
                    Lng = 151.2195
                },
                MapTypeId = MapTypeId.Roadmap
            };
    }

    private Task OnAfterMapInit()
    {
        return Task.CompletedTask;
    }

    private async Task GetMapDataFeature()
    {
        var rootFeature = new Feature();
        var childFeature = new Feature();
        childFeature.Properties = new Dictionary<string, object>[]
        {
            new Dictionary<string, object>()
            {
                {"type", "Feature"},
                {"properties",
                    new Dictionary<string, object>()
                    {
                        {"stroke", "#555555"},
                        {"stroke-width", 2},
                        {"stroke-opacity", 1},
                    }
                },
                {"id", 1},
                {"geometry",
                    new Dictionary<string, object>()
                    {
                        {"type", "LineString"},
                        {"coordinates", new  double[][]
                        {
                            new double []{ 151.219, -33.869},
                            new double []{ 151.23, -33.88},
                        }
                        },
                    }
                },
            }
        };

        rootFeature.Properties = new Dictionary<string, object>[]
        {
            new Dictionary<string, object>()
            {
                {"type", "FeatureCollection"},
                {"features", childFeature.Properties},
            }
        };

        await _map1.InteropObject.Data.AddGeoJson(rootFeature);

        await _map1.InteropObject.Data.SetStyle(new StyleOptions { StrokeColor = "blue", StrokeWeight = 2 });
    }

    private async Task GetMapDataGeoJsonLine()
    {
        var jsonData = "{ \"type\": \"FeatureCollection\"," +
                       "  \"features\": [" +
                       "{ \"type\": \"Feature\"," +
                       " \"id\": 2," +
                       " \"properties\": { \"stroke\": \"#555555\", \"stroke-width\": 2, \"stroke-opacity\": 1 }, " +
                       " \"geometry\": {\"type\": \"LineString\",  \"coordinates\": [ [ 151.219, -33.888], [151.23, -33.869]]}}]}";

        await _map1.InteropObject.Data.AddGeoJson(jsonData);
        await _map1.InteropObject.Data.SetStyle(new StyleOptions { StrokeColor = "green", StrokeWeight = 2 });
    }

    private async Task GetMapDataGeoJsonLineWithOvveriderStyle()
    {
        var jsonData = "{ \"type\": \"FeatureCollection\"," +
                       "  \"features\": [" +
                       "{ \"type\": \"Feature\"," +
                       " \"id\": 2," +
                       " \"properties\": { \"stroke\": \"#555555\", \"stroke-width\": 2, \"stroke-opacity\": 1 }, " +
                       " \"geometry\": {\"type\": \"LineString\",  \"coordinates\": [ [ 151.219, -33.888], [151.23, -33.869]]}}]}";

        var features = await _map1.InteropObject.Data.AddGeoJson(jsonData);
        var firstFeature = features.First();
        var featureId = await firstFeature.GetId();
     
    //var feature = await _map1.InteropObject.Data.GetFeatureById(featureId);
        await _map1.InteropObject.Data.OverrideStyle(firstFeature, new StyleOptions { StrokeColor = "green", StrokeWeight = 2 });
    }

    private async Task GetMapDataGeoJsonPolygon()
    {
        var jsonData = "{ \"type\": \"FeatureCollection\"," +
                       "  \"features\": [" +
                       "{ \"type\": \"Feature\"," +
                       " \"id\": 3," +
                       " \"properties\": { \"stroke\": \"#555555\", \"stroke-width\": 2, \"stroke-opacity\": 1 }, " +
                       " \"geometry\": {\"type\": \"Polygon\",  \"coordinates\": [ [ [ 151.219, -33.888], [151.23, -33.888], [151.23, -33.869], [ 151.219, -33.869], [ 151.219, -33.888]]]}}]}";

        await _map1.InteropObject.Data.AddGeoJson(jsonData);
        await _map1.InteropObject.Data.SetStyle(new StyleOptions { StrokeColor = "magenta", StrokeWeight = 2, FillColor = "magenta", FillOpacity = 0.3f });
    }

    private async Task RemoveFeatures()
    {
        await _map1.InteropObject.Data.RemoveAll();
    }
}

